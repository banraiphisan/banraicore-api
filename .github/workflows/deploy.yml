name: Deploy to Kubernetes

on:
  push:
    branches: [main]
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '.gitignore'
      - '.github/**'
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy to self-hosted Kubernetes
    runs-on: [ self-hosted, k8s-runner ]
    env:
      DEPLOYMENT_REPO: https://github.com/banraiphisan/deployment
      DEPLOYMENT_PATH: k8s/apps/banraicore-api/
      NAMESPACE: banraiphisan

    steps:
      - name: Checkout app repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Log in to GHCR
        run: echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build & Push to GHCR
        run: |
          IMAGE_NAME=ghcr.io/${{ github.repository_owner }}/banraicore-api
          IMAGE_TAG=$(git rev-parse --short HEAD)
          
          if docker manifest inspect $IMAGE_NAME:$IMAGE_TAG > /dev/null 2>&1; then
            echo "Image $IMAGE_NAME:$IMAGE_TAG already exists, skipping build"
          else
            echo "Building and pushing $IMAGE_NAME:$IMAGE_TAG"
            docker build -t $IMAGE_NAME:$IMAGE_TAG .
            docker push $IMAGE_NAME:$IMAGE_TAG
          fi
          
          docker tag $IMAGE_NAME:$IMAGE_TAG $IMAGE_NAME:latest
          docker push $IMAGE_NAME:latest

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.27.0'

      - name: Set up Kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBECONFIG_DATA }}" | base64 -d | tee $HOME/.kube/config > /dev/null
          chmod 600 $HOME/.kube/config
        env:
          HOME: /home/github-runner

      - name: Verify kubectl connection
        run: |
          echo "Testing kubectl connection..."
          kubectl cluster-info --request-timeout=10s
          echo "kubectl connected successfully"
        env:
          HOME: /home/github-runner

      - name: Checkout deployment manifests
        uses: actions/checkout@v4
        with:
          repository: banraiphisan/deployment
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          path: deployment-repo

      - name: Update image tag in manifests
        run: |
          IMAGE_TAG=$(git rev-parse --short HEAD)
          IMAGE_NAME=ghcr.io/${{ github.repository_owner }}/banraicore-api
          
          find deployment-repo/${{ env.DEPLOYMENT_PATH }} -name "*.yaml" -o -name "*.yml" | xargs sed -i "s|image:.*banraicore-api.*|image: $IMAGE_NAME:$IMAGE_TAG|g"
          
          echo "Updated manifests with image: $IMAGE_NAME:$IMAGE_TAG"

      - name: Apply manifests to namespace
        run: |
          echo "Deploying to namespace: ${{ env.NAMESPACE }}"
          
          kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -
          
          kubectl apply -f deployment-repo/${{ env.DEPLOYMENT_PATH }} -n ${{ env.NAMESPACE }}
          
          kubectl rollout status deployment/banraicore-api -n ${{ env.NAMESPACE }} --timeout=300s
          
          echo "Deployment completed successfully"
        env:
          HOME: /home/github-runner

      - name: Verify deployment
        run: |
          echo "Deployment status:"
          kubectl get pods -n ${{ env.NAMESPACE }} -l app=banraicore-api
          kubectl get svc -n ${{ env.NAMESPACE }} -l app=banraicore-api
        env:
          HOME: /home/github-runner